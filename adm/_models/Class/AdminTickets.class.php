<?phprequire_once 'vendor/autoload.php';use Twilio\Rest\Client;/** * AdminPost.class [ MODEL ADMIN ] * Respnsável por gerenciar os posts no Admin do sistema! *  * @copyright (c) Jefferson Androcles */class AdminTickets {    private $Data;    private $Post;    private $Error;    private $Result;    //Nome da tabela no banco de dados    const Entity = 'tb_tickets';    /**     * <b>Cadastrar o Post:</b> Envelope os dados do post em um array atribuitivo e execute esse método     * para cadastrar o post. Envia a capa automaticamente!     * @param ARRAY $Data = Atribuitivo     */    public function ExeCreate(array $Data) {        $this->Data = $Data;        if (in_array('', $this->Data)):            $this->Error = ["Existem campos em branco. Favor preencha todos os campos!", 'blue', 'lnr lnr-warning', 5000];            $this->Result = false;        else:            $this->setData();            $this->checkData();            if ($this->Result):                if (is_array($this->Data['file'])):                    $upload = new Upload("../uploads/tickets/");                    $upload->Image($this->Data['file'], $this->Data['assunto'], null, $this->Data['iduser']);                endif;                if (isset($upload) && $upload->getResult()):                    $this->Data['file'] = $upload->getResult();                $this->Create();            else:                unset($this->Data['file']);                $this->Create();            endif;        endif;    endif;}public function ExeActive($Id) {    $this->Post = (int) $Id;    $read = new Read;    $read->ExeRead(self::Entity, "WHERE id = :u AND status = 'PENDENTE'", "u={$this->Post}");    if (!$read->getResult()):        $this->Error = ["Essa chamada foi aceita por outro usuário!", 'red', 'lnr lnr-warning', 5000];        $this->Result = false;    else:        $Update = new Update;        $Update->ExeUpdate(self::Entity, array("status" => "AGUARDANDO", "idsuporte" => $_SESSION['userlogin']['IdUsuario']), "WHERE id = :u", "u={$this->Post}");        $this->sendAnswer();        $this->Error = ["Tudo certo! Aguarde o redirecionamento!", 'green', 'lnr lnr-smile', 5000];        $this->Result = "?exe=tickets/room&ticket={$this->Post}";    endif;}public function ExeFinalize($Id) {    $this->Post = (int) $Id;    $read = new Read;    $read->ExeRead(self::Entity, "WHERE id = :u", "u={$this->Post}");    if (!$read->getResult()):        $this->Error = ["Essae ticket não existe no sistema!", 'red', 'lnr lnr-warning', 5000];        $this->Result = false;    else:        $Update = new Update;        $datafim = date("Y-m-d H:i:s");        $horatotal = Check::Hours(date("H:i", strtotime($read->getResult()[0]['datainicio'])), date("H:i", strtotime($datafim)));        $Update->ExeUpdate(self::Entity, array("status" => "FINALIZADO", "datafim" => $datafim, "horatotal" => $horatotal), "WHERE id = :u", "u={$this->Post}");        $this->sendFinalize();        $this->Error = ["O ticket <b>{$read->getResult()[0]['assunto']}</b>, foi finalizado com sucesso!", 'green', 'lnr lnr-smile', 5000];        $this->Result = true;    endif;}public function ExeMsg($Id, array $Data) {    $this->Post = (int) $Id;    $this->Data = $Data;    $Read = new Read;    $Read->ExeRead(self::Entity, "WHERE id = :u", "u={$this->Post}");    if (in_array('', $this->Data)):        $this->Error = ["Existem campos em branco. Favor preencha todos os campos!", 'blue', 'lnr lnr-warning', 5000];        $this->Result = false;    elseif ($Read->getResult()[0]['status'] == "FINALIZADO"):        $this->Error = ["Esse chamado foi finalizado! Favor, abrir outro chamado!", 'red', 'lnr lnr-warning', 5000];        $this->Result = false;    else:        if ($_SESSION['userlogin']['nivel_user'] >= 3):            $this->Data['remetente'] = $Read->getResult()[0]['idsuporte'];            $this->Data['destino'] = $Read->getResult()[0]['iduser'];            $this->sendCli();        else:            $this->Data['remetente'] = $Read->getResult()[0]['iduser'];            $this->Data['destino'] = ($Read->getResult()[0]['idsuporte'] ? $Read->getResult()[0]['idsuporte'] : 0);            if ($this->Data['destino'] !== 0) {                $this->sendSup();            }        endif;        $this->Data['datamsg'] = date("Y-m-d H:i:s");        $this->Data['statusmsg'] = "N";        $this->Data['idticket'] = $this->Post;        if (is_array($this->Data['file'])):            $upload = new Upload("../uploads/tickets/");            $upload->Image($this->Data['file'], $Read->getResult()[0]['assunto'], null, $Read->getResult()[0]['iduser']);        endif;        if (isset($upload) && $upload->getResult()):            $this->Data['file'] = $upload->getResult();    else:        unset($this->Data['file']);    endif;    $Create = new Create;    $Create->ExeCreate("tb_mensagens", $this->Data);    $this->Error = ["Mensagem enviada, aguarde o carregamento!", 'green', 'lnr lnr-smile', 5000];    $this->Result = true;//            echo "<pre>";//            var_dump($this->Data);//            echo "</pre>";endif;}    /**     * <b>Atualizar Post:</b> Envelope os dados em uma array atribuitivo e informe o id de um      * post para atualiza-lo na tabela!     * @param INT $PostId = Id do post     * @param ARRAY $Data = Atribuitivo     */    public function ExeUpdate(array $Data) {        $this->Data = $Data;        $read = new Read;        $delete = new Delete;        if (in_array('', $this->Data) || !isset($this->Data['IdEmpresaUp'])):            $this->Error = ["Existem campos em branco. Favor preencha todos os campos!", 'blue', 'lnr lnr-warning', 5000];        $this->Result = false;    else:        if (is_array($this->Data['Upload'])):            $read->ExeRead(self::Entity, "WHERE name_up = :u", "u={$this->Data['name_up']}");            $exe = '../uploads/' . $read->getResult()[0]['Upload'];            if (file_exists($exe) && is_file($exe)):                unlink($exe);        endif;        $upload = new Upload;        $upload->File($this->Data['Upload'], $this->Data['name_up'], 'files', 100);        if ($upload->getResult()):            $this->Data['Upload'] = $upload->getResult();            $delete->ExeDelete(self::Entity, "WHERE name_up = :u", "u={$this->Data['name_up']}");            $this->ExeCreate($this->Data);        else:            $this->Error = ["Erro ao atualizar, verifique seu upload!", 'blue', 'lnr lnr-warning', 5000];            $this->Result = false;        endif;    else:        $read->ExeRead(self::Entity, "WHERE name_up = :u ", "u={$this->Data['name_up']}");        $this->Data['Upload'] = $read->getResult()[0]['Upload'];        $delete->ExeDelete(self::Entity, "WHERE name_up = :u", "u={$this->Data['name_up']}");        $this->ExeCreate($this->Data);    endif;endif;}    /**     * <b>Deleta Post:</b> Informe o ID do post a ser removido para que esse método realize uma checagem de     * pastas e galerias excluinto todos os dados nessesários!     * @param INT $PostId = Id do post     */    public function ExeDelete($Name) {        $this->Post = (string) $Name;        $read = new Read;        $read->ExeRead(self::Entity, "WHERE name_up = :u", "u={$this->Post}");        if (!$read->getResult()):            $this->Error = ["O upload que você tentou deletar não existe no sistema!", 'red', 'lnr lnr-warning', 5000];            $this->Result = false;        else:            $Nome = $read->getResult()[0]['NomeUp'];            $exe = '../uploads/' . $read->getResult()[0]['Upload'];            if (file_exists($exe) && is_file($exe)):                unlink($exe);        endif;        $deleta = new Delete;        $deleta->ExeDelete(self::Entity, "WHERE name_up = :u", "u={$this->Post}");        $this->Error = ["O upload <b>{$Nome}</b> foi removido com sucesso do sistema!", 'green', 'lnr lnr-smile', 5000];        $this->Result = true;    endif;}    /**     * <b>Ativa/Inativa Post:</b> Informe o ID do post e o status e um status sendo 1 para ativo e 0 para     * rascunho. Esse méto ativa e inativa os posts!     * @param INT $PostId = Id do post     * @param STRING $PostStatus = 1 para ativo, 0 para inativo     */    public function ExeStatus($PostId, $PostStatus) {        $this->Post = (int) $PostId;        $this->Data['post_status'] = (string) $PostStatus;        $Update = new Update;        $Update->ExeUpdate(self::Entity, $this->Data, "WHERE post_id = :id", "id={$this->Post}");    }    /**     * <b>Verificar Cadastro:</b> Retorna ID do registro se o cadastro for efetuado ou FALSE se não.     * Para verificar erros execute um getError();     * @return BOOL $Var = InsertID or False     */    public function getResult() {        return $this->Result;    }    /**     * <b>Obter Erro:</b> Retorna um array associativo com uma mensagem e o tipo de erro.     * @return ARRAY $Error = Array associatico com o erro     */    public function getError() {        return $this->Error;    }    /*     * ***************************************     * **********  PRIVATE METHODS  **********     * ***************************************     */    //Valida e cria os dados para realizar o cadastro    private function setData() {        $this->Data['iduser'] = explode('-', $this->Data['iduser']);        $this->Data['idempresatickets'] = $this->Data['iduser'][1];        $this->Data['iduser'] = $this->Data['iduser'][0];        $Mensagem = $this->Data['mensagem'];        $File = $this->Data['file'];        unset($this->Data['mensagem'], $this->Data['file']);        $this->Data = array_map('strip_tags', $this->Data);        $this->Data = array_map('trim', $this->Data);        $this->Data['idaberto'] = $_SESSION['userlogin']['IdUsuario'];        $this->Data['mensagem'] = $Mensagem;        $this->Data['file'] = $File;        $this->Data['status'] = "PENDENTE";        $this->Data['datainicio'] = date("Y-m-d H:i:s");    }    private function checkData() {        if (in_array('', $this->Data)):            $this->Error = ["Existem campos em branco. Favor preencha todos os campos!", 'blue', 'lnr lnr-warning', 5000];            $this->Result = false;        else:            $this->Result = true;        endif;    }//    private function setName() {//        $readName = new Read;//        $readName->ExeRead(self::Entity, "WHERE name_up = :t", "t={$this->Data['name_up']}");//        if ($readName->getResult())://            $this->Error = ["Oppsss, o upload <b>{$this->Data['NomeUp']}</b> já está cadastrado no sistema!", 'red', 'lnr lnr-warning', 4000];//            $this->Result = false;//        else://            $this->Result = true;//        endif;//    }    private function getCod() {        $Read = new Read;        $Read->ExeRead("tb_codigos");        $Codigo = $Read->getResult()[0]['Codigo'] . "/" . date("Y");        $Update = new Update;        $Update->ExeUpdate("tb_codigos", array("Codigo" => ($Read->getResult()[0]['Codigo'] + 1)), "WHERE IdCodigo = :id", "id={$Read->getResult()[0]['IdCodigo']}");        if ($Update->getResult()):            return $Codigo;        else:            die();        endif;    }    private function sendSup() {        $Mail = new Email;        $Read = new Read;        $Read->ExeRead(self::Entity, "WHERE id = :u", "u={$this->Post}");        $Assunto = $Read->getResult()[0]['assunto'];        $Read->ExeRead("tb_usuarios", "WHERE IdUsuario = :u", "u={$this->Data['destino']}");        $MsgMail = array(            "Assunto" => "Uma nova mensagem de: {$_SESSION['userlogin']['NomeUsuario']} - suporte WSMTEC!",            "Mensagem" => "Assunto: <b>{$Assunto}</b>,<br/> Nova mensagem: <b>{$this->Data['mensagem']}</b> <br/><br/>Acesse o painel em: <a href='https://wsmtec.com.br/adm'>PAINEL</a> <br/>",            "RemetenteNome" => "{$_SESSION['userlogin']['NomeUsuario']}",            "RemetenteEmail" => "{$_SESSION['userlogin']['EmailUsuario']}",            "DestinoNome" => "{$Read->getResult()[0]['NomeUsuario']}",            "DestinoEmail" => "{$Read->getResult()[0]['EmailUsuario']}"        );        $Mail->Enviar($MsgMail);    }    private function sendCli() {        $Mail = new Email;        $Read = new Read;        $Read->ExeRead(self::Entity, "WHERE id = :u", "u={$this->Post}");        $Assunto = $Read->getResult()[0]['assunto'];        $Read->ExeRead("tb_usuarios", "WHERE IdUsuario = :u", "u={$this->Data['destino']}");        $MsgMail = array(            "Assunto" => "Uma nova mensagem de: {$_SESSION['userlogin']['NomeUsuario']} - suporte WSMTEC!",            "Mensagem" => "Assunto: <b>{$Assunto}</b>,<br/> Nova mensagem: <b>{$this->Data['mensagem']}</b> <br/><br/>Acesse o painel em: <a href='https://wsmtec.com.br/adm'>PAINEL</a> <br/>",            "RemetenteNome" => "{$_SESSION['userlogin']['NomeUsuario']}",            "RemetenteEmail" => "{$_SESSION['userlogin']['EmailUsuario']}",            "DestinoNome" => "{$Read->getResult()[0]['NomeUsuario']}",            "DestinoEmail" => "{$Read->getResult()[0]['EmailUsuario']}"        );        $Mail->Enviar($MsgMail);    }    private function sendMail($cod) {//        $apiURL = 'https://eu273.chat-api.com/instance233987/';//        $token = '8rskkdy8a3j443ax';//        $Num = ['5511984627070', '551122621285'];        $Mail = new Email;        $Read = new Read;        $Read->ExeRead("tb_usuarios", "WHERE IdUsuario = :u", "u={$this->Data['iduser']}");        $sid = "ACae9934cc6eeace5d2c1be7e9b4297c2e";        $token = "46db2f9f463bb0933f18bf32dad06f81";        $twilio = new Client($sid, $token);        /* comentado por eduardo em 09/05/2022        $message = $twilio->messages                ->create("whatsapp:+551122621285", // to                     array(                        "from" => "whatsapp:+14155238886",                        "body" => "Fala pessoal do suporte, de boa?\n"                        . "Então... tem um ticket pra vocês... dá uma olhada!\n\n"                        . "*Ticket solicitado por:* {$Read->getResult()[0]['NomeUsuario']}!\n"                        . "*Codigo:* {$cod},\n"                        . "*Assunto:* {$this->Data['assunto']},\n"                        . "*Mensagem:* {$this->Data['mensagem']}."                    )                );        *///        print($message->sid);                $sids = "AC7ea78119d0ae85f72de081c11a8e13f2";                $tokens = "1cc2ac997f0e070fc3d6d95eaba0348d";                $twilios = new Client($sids, $tokens);                $messages = $twilios->messages                ->create("whatsapp:+5511984627070", // to                     array(                        "from" => "whatsapp:+14155238886",                        "body" => "Fala pessoal do suporte, de boa?\n"                        . "Então... tem um ticket pra vocês... dá uma olhada!\n\n"                        . "*Ticket solicitado por:* {$Read->getResult()[0]['NomeUsuario']}!\n"                        . "*Codigo:* {$cod},\n"                        . "*Assunto:* {$this->Data['assunto']},\n"                        . "*Mensagem:* {$this->Data['mensagem']}."                    )                );//        print($messages->sid);//        foreach ($Num as $Key => $Value) {//            $data = json_encode(//                    array(//                        'chatId' => $Value . '@c.us',//                        'body' => "E aí pessoal do suporte, de boa?\n Então... tem um ticket pra vocês... dá uma olhada!\n\n\n Ticket solicitado por: {$Read->getResult()[0]['NomeUsuario']}! \n\nCodigo: {$cod}\n\n Assunto: {$this->Data['assunto']},\n\n Mensagem: {$this->Data['mensagem']}."//                    )//            );//            $url = $apiURL . 'message?token=' . $token;//            $options = stream_context_create(//                    array('http' =>//                        array(//                            'method' => 'POST',//                            'header' => 'Content-type: application/json',//                            'content' => $data//                        )//                    )//            );//            $response = file_get_contents($url, false, $options);//        }                $MsgMail = array(                    "Assunto" => "Ticket foi solicitado por: {$Read->getResult()[0]['NomeUsuario']} - sistema WSMTEC!",                    "Mensagem" => "Ticket solicitado por: <b>{$Read->getResult()[0]['NomeUsuario']}</b>! <br/>Codigo: <b>{$cod}</b><br/> Assunto: <b>{$this->Data['assunto']}</b>,<br/> Mensagem: <b>{$this->Data['mensagem']}</b>",                    "RemetenteNome" => "{$Read->getResult()[0]['NomeUsuario']}",                    "RemetenteEmail" => "{$Read->getResult()[0]['EmailUsuario']}",                    "DestinoNome" => "Suporte WSMTEC!",                    "DestinoEmail" => "suporte@wsmtec.com.br"                );                $Mail->Enviar($MsgMail);            }            private function sendAnswer() {                $Mail = new Email;                $Read = new Read;                $Read->ExeRead(self::Entity, "WHERE id = :u", "u={$this->Post}");                $codigo = $Read->getResult()[0]['codigo'];                $assunto = $Read->getResult()[0]['assunto'];                $Read->ExeRead("tb_usuarios", "WHERE IdUsuario = :u", "u={$Read->getResult()[0]['iduser']}");                $MsgMail = array(                    "Assunto" => "Seu ticket foi aberto pelo suporte WSMTEC, aguarde a resposta!",                    "Mensagem" => "Seu ticket foi aberto pelo suporte,<br/>codigo:<b>{$codigo}</b>,<br/>assunto:<b>{$assunto}</b>. <br/>Acesse o painel em: <a href='https://wsmtec.com.br/adm'>PAINEL</a> <br/>Em breve estaremos respondendo à sua solicitação.",                    "RemetenteNome" => "Suporte",                    "RemetenteEmail" => "suporte@wsmtec.com.br",                    "DestinoNome" => "{$Read->getResult()[0]['NomeUsuario']}",                    "DestinoEmail" => "{$Read->getResult()[0]['EmailUsuario']}"                );                $Mail->Enviar($MsgMail);            }            private function sendFinalize() {                $Mail = new Email;                $Read = new Read;                $Read->ExeRead(self::Entity, "WHERE id = :u", "u={$this->Post}");                $codigo = $Read->getResult()[0]['codigo'];                $Read->ExeRead("tb_usuarios", "WHERE IdUsuario = :u", "u={$Read->getResult()[0]['iduser']}");                $MsgMail = array(                    "Assunto" => "Seu ticket foi finalizado, agradecemos o seu contato - WSMTEC!",                    "Mensagem" => "Seu ticket de codigo:<b>{$codigo}</b>, foi finalizado!",                    "RemetenteNome" => "Suporte",                    "RemetenteEmail" => "suporte@wsmtec.com.br",                    "DestinoNome" => "{$Read->getResult()[0]['NomeUsuario']}",                    "DestinoEmail" => "{$Read->getResult()[0]['EmailUsuario']}"                );                $Mail->Enviar($MsgMail);            }    //Cadastra o post no banco!            private function Create() {                $cod = $this->getCod();                $this->sendMail($cod);                $Create = new Create;                $Msg = array(                    "statusmsg" => "N",                    "datamsg" => $this->Data['datainicio'],                    "remetente" => $this->Data['iduser'],                    "mensagem" => $this->Data['mensagem'],                    "file" => (isset($this->Data['file']) ? $this->Data['file'] : null)                );                unset($this->Data['mensagem'], $this->Data['file']);                $this->Data['codigo'] = $cod;                $Create->ExeCreate(self::Entity, $this->Data);                if ($Create->getResult()):                    $Msg['idticket'] = $Create->getResult();                    $Create->ExeCreate("tb_mensagens", $Msg);                    $this->Error = ["Suporte <b>{$this->Data['assunto']}</b>, foi solicitado!", 'green', 'lnr lnr-smile', 4000];                    $this->Result = true;                else:                    $this->Error = ["Erro ao solicitar chamada <b>{$this->Data['assunto']}</b>!", 'red', 'lnr lnr-warning', 4000];                    $this->Result = false;                endif;            }        }